using System.Net.Sockets;

namespace Ookii.VmSockets;

public static class HvSocket
{
    public const AddressFamily AddressFamily = (AddressFamily)34;

    public const int SocketAddressSize = 36;

    public static readonly Guid Broadcast = new(0xFFFFFFFF, 0xFFFF, 0xFFFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    public static readonly Guid Children = new(0x90DB8B89, 0x0D35, 0x4F79, 0x8C, 0xE9, 0x49, 0xEA, 0x0A, 0xC8, 0xB7, 0xCD);

    public static readonly Guid Loopback = new(0xE0E16197, 0xDD56, 0x4A10, 0x91, 0x95, 0x5E, 0xE7, 0xA1, 0x55, 0xA8, 0x38);

    public static readonly Guid Parent = new(0xA42E7CDA, 0xD03F, 0x480C, 0x9C, 0xC2, 0xA4, 0xDE, 0x20, 0xAB, 0xB8, 0x78);

    public static readonly Guid SiloHost = new(0x36BD0C5C, 0x7276, 0x4223, 0x88, 0xBA, 0x7D, 0x03, 0xB6, 0x54, 0xC5, 0x68);

    public static readonly Guid Wildcard = Guid.Empty;

    public static readonly Guid VSockTemplate = new(0x00000000, 0xFACB, 0x11E6, 0xBD, 0x58, 0x64, 0x00, 0x6A, 0x79, 0x86, 0xD3);

    public static Guid CreateVSockServiceId(int port)
    {
        if (port < 0)
        {
            throw new ArgumentOutOfRangeException(nameof(port));
        }

        return new((uint)port, 0xFACB, 0x11E6, 0xBD, 0x58, 0x64, 0x00, 0x6A, 0x79, 0x86, 0xD3);
    }
}
